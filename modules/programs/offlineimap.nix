{ config, lib, pkgs, ... }:

with lib;

let

  cfg = config.programs.offlineimap;

  accounts = filter (a: a.offlineimap.enable)
    (attrValues config.accounts.email.accounts);

  # Generates a script to fetch only a specific account.
  genOfflineImapScript = account: with account;
    pkgs.writeShellScriptBin "offlineimap-${name}" ''
      exec ${pkgs.offlineimap}/bin/offlineimap -a${account.name} "$@"
    '';

  localTypeStr = account:
    if account.flavor == "gmail.com"
    then "GmailMaildir"
    else "Maildir";

  remoteTypeStr = account:
    if account.flavor == "gmail.com"
    then "Gmail"
    else "IMAP";

  remoteHostStr = account: with account;
    optionalString (imap.host != null) "remotehost = ${imap.host}";

  loginCommandStr = account: "remoteuser = ${account.userName}";

  passwordCommandStr = account:
    let
      arglist = concatMapStringsSep "," (x: "'${x}'") account.passwordCommand;
    in
      optionalString (account.passwordCommand != null)
        ''remotepasseval = get_pass("${account.name}", [${arglist}])'';

  postSyncHookStr = account: with account;
    if offlineimap.postSyncHookCommand != "" then
      "postsynchook = ${offlineimap.postSyncHookCommand}"
    else if account.notmuch.enable then
      "postsynchook = notmuch new"
    else
      "";

  sslStr = account: with account.imap.tls;
    if account.imap.tls.enable
    then
      ''
        ssl = yes
        sslcacertfile = ${account.imap.tls.certificatesFile}
      ''
    else "ssl = no";

  accountStr = account: with account;
    ''
      [Account ${name}]
      localrepository = ${name}-local
      remoterepository = ${name}-remote
      ${postSyncHookStr account}

      [Repository ${name}-local]
      type = ${localTypeStr account}
      localfolders = ${maildir.absPath}

      [Repository ${name}-remote]
      type = ${remoteTypeStr account}
      ${remoteHostStr account}
      ${loginCommandStr account}
      ${optionalString ((imap.port or null) != null) "remoteport=${imap.port}"}
      ${passwordCommandStr account}
      realdelete = yes
      maxconnections = 3
      ${sslStr account}

      ${offlineimap.extraConfig}
    '';

  configFile = mailAccounts:
      ''
        # Generated by Home Manager.
        # See https://github.com/OfflineIMAP/offlineimap/blob/master/offlineimap.conf
        # for an exhaustive list of options.
        [general]
        accounts = ${concatMapStringsSep "," (a: a.name) accounts}
        maxsyncaccounts= 4
        socktimeout = 10
        pythonfile = $XDG_CONFIG_HOME/offlineimap/get_settings.py
        metadata = $XDG_DATA_HOME/offlineimap
        ui = ttyui

        # user extraConfig if any
        ${cfg.extraConfig}

        [mbnames]
        enabled = yes
        filename = $XDG_CONFIG_HOME/mutt/mailboxes
        header = "mailboxes *\nmailboxes !\n"
        peritem = mailboxes =%(accountname)s/%(foldername)s
        sep = "\n"
        footer = "\n"

        ${concatStringsSep "\n" (map accountStr mailAccounts)}
      '';

in

{
  options = {
    programs.offlineimap = {
      enable = mkEnableOption "OfflineIMAP";

      pythonFile = mkOption {
        type = types.lines;
        default = ''
          # Generated by Home Manager.
          import subprocess

          def get_pass(service, cmd):
              res = subprocess.check_output(cmd, )
              return res
        '';
        description = ''
          Python code that can then be used in other parts of the
          configuration.
        '';
      };

      extraConfig = mkOption {
        type = types.lines;
        default = "";
        example = ''
          maxage = 30
        '';
        description = ''
          Extra configuration lines added to the configuration. You
          can add a <code>[DEFAULT]</code> section to provide defaults
          for all accounts.
        '';
      };
    };
  };

  config = mkIf cfg.enable {
    home.packages = [ pkgs.offlineimap ] ++ map genOfflineImapScript accounts;

    xdg.configFile."offlineimap/get_settings.py".text = cfg.pythonFile;

    xdg.configFile."offlineimap/config".text = configFile accounts;
  };
}
